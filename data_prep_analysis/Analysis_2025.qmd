---
title: "Analysis"
author: "Tirion"
format: html
editor: visual
---

```{python}
import torch
import numpy as np
import pandas as pd
import xarray as xr
from matplotlib import pyplot as plt
import torch.nn.functional as F
```

```{r}
library(terra)
library(reticulate)
library(data.table)
library(ggplot2)
library(matrixStats)
```

## Plot test metrics while model is training:

```{r}
# load data
test_metrics <- read.csv("C:/Users/TGRICE/Downloads/test_metrics.csv")

# plot MAE by epochs
epochs <- seq(0, 250, by=10)
plot(x = epochs, y = test_metrics[,2], xlab = "# of epochs", ylab = "MAE")

# plot Wasserstein distance by epochs
plot(x = epochs, y = test_metrics[,3], xlab = "# of epochs", ylab = "Wass. dist")
```

## Load data:

```{python}
pred_dir = 'O:/Mosaic_Yukon/Tirion/Results/Run2/'
pred_path = pred_dir + 'GAN_gen90_testregion.nc'
truth_dir = 'C:/Users/TGRICE/OneDrive - Government of BC/Documents/GANs/PRISM/tmax/mar/'
truth_path = truth_dir + 'prism_train_coarse.nc' 

# load GAN predictions and true fields (PRISM) 
pred = xr.open_dataset(pred_path)
truth = xr.open_dataset(truth_path)

# crop truth to the size of pred if needed
truth = truth.isel(longitude=slice(0,288))
```

## Prepare test data (truth):

```{python}
# unstandardizing the truth
stand = pd.read_csv(truth_dir + 'standardization.csv')
#stand

# mean = stand['mean'][0]
# std = stand['std'][0]
# truth['tmax'] = (truth.tmax*std)+mean

# change pred longitude to degrees E to match truth
pred = pred.assign_coords(longitude=pred.longitude % 360)
```

## Plot difference between truth and prediction:

```{python}
# make torch tensors of fields to compute MAE
pred_np = np.array(pred.tmax)
truth_np = np.array(truth.tmax)

# mask out nans
mask = ~np.isnan(truth_np) & ~np.isnan(pred_np)
pred_valid = torch.from_numpy(pred_np[mask])
truth_valid = torch.from_numpy(truth_np[mask])


MAE = F.l1_loss(truth_valid.float(), pred_valid.float())
#print("MAE:", MAE.item())

# plotting truth, prediction, and difference (choose to save or not)
fig, ax = plt.subplots(1, 3, layout='constrained', figsize=(10, 5), sharex=True, sharey=True)

minmin = np.min(truth.tmax)
maxmax = np.max(truth.tmax)
# precip (30), temp max (3)
dmin = -3
dmax = 3

pc1 = ax[0].pcolormesh(truth.longitude, truth.latitude, truth.tmax, vmin=minmin, vmax=maxmax, cmap='viridis', label=r'$m$')
ax[0].set_title(f'truth', fontsize='medium', loc='center')
ax[0].set_ylim(59, 71)

pc2 = ax[1].pcolormesh(pred.longitude, pred.latitude, pred.tmax, vmin=minmin, vmax=maxmax, cmap='viridis', label=r'$m$')
ax[1].set_title(f'prediction', fontsize='medium', loc='center')
ax[1].set_ylim(59, 71)

pc3 = ax[2].pcolormesh(pred.longitude, pred.latitude, truth.tmax.values-pred.tmax.values, vmin=dmin, vmax=dmax, cmap='RdBu', label=r'$m$')
ax[2].set_title(f'truth-prediction', fontsize='medium', loc='center')
ax[2].set_ylim(59, 71)

fig.supylabel('latitude [deg N]')
fig.supxlabel('longitude [deg E]')

fig.suptitle(f"March tmax, MAE = %.2f" %MAE)

fig.colorbar(pc1, shrink=0.5, aspect=20, location='bottom', ax=ax[0:2])
fig.colorbar(pc3, shrink=0.9, aspect=20, location='bottom', ax=ax[2])
plt.savefig(pred_dir + "pred_PRISM_test_diff.png", dpi = 400)
plt.close()
```

## Plot standard deviation maps:

```{python}

```
