---
title: "PRISM_Prediction"
author: "Kiri, Susan"
format: html
editor: visual
---

```{python}
import torch
import numpy as np
import mlflow
import xarray as xr
from matplotlib import pyplot as plt
from matplotlib import colorbar, colors, gridspec
```

# Stack Covariates

```{r}

library(data.table)
library(terra)
```

```{r}

pred_fold <- "C:/Users/SBEALE/Desktop/GAN Predictions/prec/worldclim/thufir_runs/prec_march_tiling16/gen3/"
data_folder <- "//objectstore2.nrs.bcgov/ffec/Mosaic_Yukon/GAN Data/prec/worldclim/full_domain_shift16/"


hrcovs <- rast(paste(data_folder,c("dem_test.nc", "lat_test.nc","lon_test.nc","coast_test.nc"), sep = ""))

plot(hrcovs)

worldclim <- rast(paste(data_folder, c("worldclim_test.nc", "worldclim_mask_test.nc"), sep=""))
#worldclim <- crop(worldclim,hrcovs)
dim(worldclim)
dim(hrcovs)
plot(worldclim)

writeCDF(hrcovs, paste0(data_folder,"hrcovs_cropped_test.nc"), overwrite = T)
writeCDF(worldclim, paste0(data_folder, "worldclim_cropped_test.nc"), overwrite = T)
```

# Load Data

```{python}
data_folder = r.data_folder
cond_fields = xr.open_dataset(data_folder + "hrcovs_cropped_test.nc")
hrcov = torch.from_numpy(cond_fields.to_array().to_numpy())[0,...]

worldclim_fields = xr.open_dataset(data_folder + "worldclim_cropped_test.nc")
worldclim2 = torch.from_numpy(worldclim_fields.to_array().to_numpy())[0,...]

plt.close()
plt.imshow(worldclim2[1])
plt.show()

prism_fields = xr.open_dataset(data_folder + "prism_test.nc")
prism = torch.from_numpy(prism_fields.to_array().to_numpy())[0,...]

plt.close()
plt.imshow(hrcov[0,...])
plt.show()

plt.close()
plt.imshow(prism)
plt.show()

worldclim2[0,torch.isnan(worldclim2[0])] = 0

plt.close()
plt.imshow(worldclim2[0])
plt.show()
```

# Make tiles

```{python}
import math
def tile_data(tensor, tile_size, offset):
  h, w = tensor.size(1), tensor.size(2)
  res_ls = []
  for y in range(int(math.ceil(h/offset))):
    for x in range(int(math.ceil(w/offset))):
      curr = tensor[:, offset*y:min(offset*y+tile_size, h), offset*x:min(offset*x+tile_size, w)]
      if(y == 0):
        res_ls.append([curr])
      else:
        res_ls[x].append(curr)
  res_pad = [[torch.nn.functional.pad(ten, (0,tile_size-ten.shape[2],0,tile_size - ten.shape[1],0,0), mode = "constant", value = 0) for ten in x] for x in res_ls]
  return(res_pad)
	
scale_factor = 4
tile_size = 128
offset = 32
res_pad = tile_data(hrcov, tile_size, offset)

worldclim_tile = tile_data(worldclim2[0].unsqueeze(0), int(tile_size/scale_factor), int(offset/scale_factor))

mask_tile = tile_data(worldclim2[1].unsqueeze(0), int(tile_size/scale_factor), int(offset/scale_factor))

plt.close()
plt.imshow(res_pad[2][4][0,...])
plt.show()

plt.close()
plt.imshow(worldclim_tile[2][4][0,...])
plt.colorbar()
plt.show()
```

```{python}
wc = torch.from_numpy(np.array(worldclim_tile))
mask = torch.from_numpy(np.array(mask_tile))

worldclim_tile = torch.cat((wc,mask), dim=2)

print(worldclim_tile.shape)
```

# Load Models and Predict

```{python}

import glob
import os
def get_key(fp):
    filename = os.path.splitext(os.path.basename(fp))[0]
    int_part = int(filename.split('_')[1])
    return int(int_part)

preds = []

device = "cuda"
worldclim_tiles = [[ten.unsqueeze(0) for ten in x] for x in worldclim_tile]
hrcov_tiles = [[ten.unsqueeze(0) for ten in x] for x in res_pad]

for filepath in sorted(glob.iglob('C:/Users/SBEALE/Desktop/Generators/prec/worldclim/thufir_runs/march_tiling16/gen3/*.pt'), key=get_key):
    print('predicting generator: ', filepath)
    G = torch.jit.load(filepath, map_location=torch.device('cuda:0'))

    pred = [[G(worldclim.to(device).float(),hr.to(device).float()).cpu().detach() for worldclim, hr in zip(w1,h1)] for w1,h1 in zip(worldclim_tiles, hrcov_tiles)]
    preds.append(pred)
```

```{python}

preds = torch.from_numpy(np.array(preds))
torch.save(preds, r.pred_fold + 'all_gen_preds.pt')

preds.shape
```

# RASP Metrics

```{python}
import scipy
def RASP(img,real):
    # Input data
    ynew = img # Generated data
    npix = ynew.shape[-1] # Shape of image in one dimension

    # Define the wavenumbers basically
    kfreq = np.fft.fftfreq(npix) * npix 
    kfreq2D = np.meshgrid(kfreq, kfreq) 
    knrm = np.sqrt(kfreq2D[0]**2 + kfreq2D[1]**2) # Magnitude of wavenumber/vector
    knrm = knrm.flatten() 

    # Computes the fourier transform and returns the amplitudes
    def calculate_2dft(image):
        fourier_image = np.fft.fftn(image)
        fourier_amplitudes = np.abs(fourier_image)**2
        return fourier_amplitudes.flatten()

    powers_gen = []
    powers_truth = []
    for i in range(ynew.shape[0]):
        wind_2d = calculate_2dft(ynew[i, ...])
        wind_real = calculate_2dft(real[i,...])
        kbins = np.arange(0.5, npix//2+1, 1.) # Bins to average the spectra
        Abins, _, _ = scipy.stats.binned_statistic(knrm, wind_2d, statistic = "mean", bins = kbins) 
        Abins *= np.pi * (kbins[1:]**2 - kbins[:-1]**2)
        
        # now for ground truth
        Abins_R, _, _ = scipy.stats.binned_statistic(knrm, wind_real, statistic = "mean", bins = kbins) 
        Abins_R *= np.pi * (kbins[1:]**2 - kbins[:-1]**2)
        powers_gen.append(Abins)
        powers_truth.append(Abins_R)

    return(powers_gen, powers_truth)
```

```{python}

prism_tiles = tile_data(prism.unsqueeze(0), tile_size, offset)

plt.close()
plt.imshow(prism_tiles[2][4][0,...])
plt.show()

plt.close()
plt.imshow(preds[2][4][0,0,...])
plt.show()

ncol = len(preds[1].shape)
nrow = len(preds[2].shape)

##calculate rasp for each tile and generator
rasp_pred = []
rasp_truth = []
for col in range(1,ncol):
  for row in range(1,nrow):
  # if (!np.isnan(prism_tiles[col][row])):
    pred, truth = RASP(preds[col][row][:,0,...].numpy(), prism_tiles[col][row].numpy())
    rasp_pred.append(pred)
    rasp_truth.append(truth)
```

## Plot RASP

```{r}
library(data.table)
library(ggplot2)
library(reticulate)
library(matrixStats)

##note - if there are tiles with empty portions, will have to remove those before calculating statistics, else with be NA
dat <- py$rasp_pred
truth <- py$rasp_truth

temp_gen <- matrix(unlist(dat), ncol = 64, byrow = T)
temp_tr <- matrix(unlist(truth), ncol = 64, byrow = T)
temp <- temp_gen/temp_tr
t_med <- colMedians(temp)
t_iqr <- colQuantiles(temp, probs = c(0.25,0.75))
t1 <- as.data.table(cbind(t_med, t_iqr))
t1[,FreqBand := 1:64]

ggplot(t1, aes(x = FreqBand, y = t_med)) +
  geom_line(linewidth = 1) +
  geom_ribbon(aes(ymin = `25%`, ymax = `75%`), alpha = 0.3, linetype = 1)+
  geom_hline(yintercept = 1)+
  ylim(0,30)
```

```{python}
fig,ax = plt.subplots(1, 1, figsize=(15, 5), layout='constrained')

ax.axhline(y=1, label='BC PRISM')
ax.plot(median_rasp_pred_wrf['FreqBand'], median_rasp_pred_wrf_small['med_wrf_small'], color='sienna', linestyle='dashed', label='GAN')
ax.plot(median_rasp_pred_wrf['FreqBand'], median_rasp_pred_wrf['med_wrf'], color='orange', linestyle='dashed', label='GAN')
ax.plot(median_rasp_pred_wrf['FreqBand'], median_rasp_pred_wrf_extra['med_wrf_extra'], color='g', linestyle='dashed', label='GAN')
ax.plot(median_rasp_pred_wrf['FreqBand'], median_rasp_pred_wrf_all['med_wrf_all'], color='mediumpurple', linestyle='dashed', label='GAN')
ax.plot(median_rasp_pred_wrf['FreqBand'], median_rasp_pred_wc['med_wc'], color='r', linestyle='dashed', label='GAN')
# ax.plot(median_rasp_pred_wrf['FreqBand'], median_rasp_pred_wc_day['med_wc_day'], color='b', linestyle='dashed', label='GAN')
ax.set_title('Normalized Power Spectrum')

# ax[0].set_xscale('log')
# ax[0].set_yscale('log')
# ax[1].set_xscale('log')
# ax[1].set_yscale('log')

fig.supylabel(r'$prec \left[\frac{P(|k|)}{P(|k|)_{PRISM}}\right]$')
fig.supxlabel('Wavenumber $|k|$')
ax.grid()

handles, labels = ax.get_legend_handles_labels()
labels = ['BC PRISM', 'GAN WRF Small', 'GAN WRF', 'GAN WRF extra cov', 'GAN WRF all months', 'GAN WorldClim']
plt.legend(handles, labels, loc='upper center', bbox_to_anchor=(0.5,-0.1))
plt.show()
plt.savefig("C:/Users/SBEALE/Desktop/GAN Predictions/prec/RAPSD_all.png", dpi = 400)
plt.close()
```

# Option 1: Crop and Concat

```{python}
preds = torch.load(r.pred_fold + 'all_gen_preds.pt')
scale_factor = 4
tile_size = 128
offset = 32
ncol = preds.shape[1]
nrow = preds.shape[2]
pad_size = int((tile_size-offset)/2)

preds_un = []
for i in range(preds.shape[0]):
  pred_crop = [[ten[0,0,pad_size:-pad_size,pad_size:-pad_size] for j,ten in enumerate(x)] for i,x in enumerate(preds[i])]

  pred_cols = [torch.cat(col, dim = 0) for col in pred_crop]
  preds_un.append(pred_cols)

final_preds = []
for i in range(0,len(preds_un)):
  final_res = torch.cat(preds_un[i], dim = 1)
  final_pad = torch.nn.functional.pad(final_res, (pad_size,pad_size,pad_size,pad_size), mode = "constant", value = 0)
  final_preds.append(final_pad)
```

```{python}
res_np = np.array(final_preds)
res_np.shape

plt.close()
plt.imshow(res_np[0])
plt.show()
```

# Create Raster

```{r}
library(terra)
library(data.table)
library(reticulate)

res <- hrcovs[[1]]
rast_dim <- dim(res)
preds <- py$res_np
rast_dim[3] <- dim(preds)[1]
dim(res)[3] <- dim(preds)[1]
dim(preds)

for (i in 1:31)
  values(res[[i]]) <- preds[i,1:rast_dim[1],1:rast_dim[2]]

unstand_mean <- 53.105507
unstand_std <- 81.41918

res_us <- (res * unstand_std) + (unstand_mean)
plot(res_us[[1]])

writeRaster(res_us, paste0(pred_fold, "GAN_prec_march_focal_nan=0_allgens.tif"), overwrite = T)

writeCDF(res_us, paste0(pred_fold, "GAN_prec_march_focal_nan=0_allgens.nc"), varname='prec', overwrite = T)
```

## Fix pred artifacts (crop to wc)

```{r}

pred <- rast(paste0(pred_fold, "GAN_prec_march_focal_nan=0_allgens.tif"))
pred

# have to change this
wc <- rast("C:/Users/SBEALE/Desktop/alaska_test/prec_03_WorldClim_coarse_focal_min_w15.nc")
plot(wc)

wc.fine <- disagg(wc, fact=4)

pred.crop <- ifel(is.na(wc.fine), NA, pred)
pred.crop

writeCDF(pred.crop, paste0(pred_fold, "GAN_prec_march_focal_nan=0_allgens.nc"), varname='prec', overwrite=TRUE)

```
